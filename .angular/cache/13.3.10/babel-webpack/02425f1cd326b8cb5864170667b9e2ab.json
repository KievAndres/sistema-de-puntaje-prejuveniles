{"ast":null,"code":"import _asyncToGenerator from \"E:\\\\Web projects\\\\sistema-de-puntaje-prejuveniles\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport crossFetch from 'cross-fetch';\nexport default class PostgrestBuilder {\n  constructor(builder) {\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.allowEmpty = builder.allowEmpty;\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    var _this = this;\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    }\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch;\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (res) {\n        var _a, _b, _c;\n        let error = null;\n        let data = null;\n        let count = null;\n        let status = res.status;\n        let statusText = res.statusText;\n        if (res.ok) {\n          if (_this.method !== 'HEAD') {\n            const body = yield res.text();\n            if (body === '') {\n              // Prefer: return=minimal\n            } else if (_this.headers['Accept'] === 'text/csv') {\n              data = body;\n            } else if (_this.headers['Accept'] && _this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n              data = body;\n            } else {\n              data = JSON.parse(body);\n            }\n          }\n          const countHeader = (_a = _this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n          const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n          if (countHeader && contentRange && contentRange.length > 1) {\n            count = parseInt(contentRange[1]);\n          }\n        } else {\n          const body = yield res.text();\n          try {\n            error = JSON.parse(body);\n            // Workaround for https://github.com/supabase/postgrest-js/issues/295\n            if (Array.isArray(error) && res.status === 404) {\n              data = [];\n              error = null;\n              status = 200;\n              statusText = 'OK';\n            }\n          } catch (_d) {\n            // Workaround for https://github.com/supabase/postgrest-js/issues/295\n            if (res.status === 404 && body === '') {\n              status = 204;\n              statusText = 'No Content';\n            } else {\n              error = {\n                message: body\n              };\n            }\n          }\n          if (error && _this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n            error = null;\n            status = 200;\n            statusText = 'OK';\n          }\n          if (error && _this.shouldThrowOnError) {\n            throw error;\n          }\n        }\n        const postgrestResponse = {\n          error,\n          data,\n          count,\n          status,\n          statusText\n        };\n        return postgrestResponse;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || ''\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: ''\n      }));\n    }\n    return res.then(onfulfilled, onrejected);\n  }\n}","map":{"version":3,"names":["crossFetch","PostgrestBuilder","constructor","builder","shouldThrowOnError","method","url","headers","schema","body","signal","allowEmpty","fetch","throwOnError","then","onfulfilled","onrejected","_this","undefined","includes","_fetch","res","toString","JSON","stringify","_ref","_asyncToGenerator","_a","_b","_c","error","data","count","status","statusText","ok","text","parse","countHeader","match","contentRange","get","split","length","parseInt","Array","isArray","_d","message","details","postgrestResponse","_x","apply","arguments","catch","fetchError","hint","code"],"sources":["E:/Web projects/sistema-de-puntaje-prejuveniles/node_modules/@supabase/postgrest-js/dist/module/PostgrestBuilder.js"],"sourcesContent":["import crossFetch from 'cross-fetch';\nexport default class PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.allowEmpty = builder.allowEmpty;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = crossFetch;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => ({\n                error: {\n                    message: `FetchError: ${fetchError.message}`,\n                    details: '',\n                    hint: '',\n                    code: fetchError.code || '',\n                },\n                data: null,\n                count: null,\n                status: 0,\n                statusText: '',\n            }));\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}